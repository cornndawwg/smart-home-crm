// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Customer {
  id                     String           @id @default(uuid())
  type                   String // residential, commercial, high-net-worth
  status                 String // prospect, active, completed, inactive
  firstName              String
  lastName               String
  company                String?
  email                  String
  phone                  String
  preferredCommunication String
  billingAddress         Address?
  properties             Property[]
  projects               Project[]
  interactions           Interaction[]
  tags                   Tag[]
  notes                  String?
  metrics                CustomerMetrics?
  proposals              Proposal[]
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
}

model Tag {
  id         String   @id @default(uuid())
  name       String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
}

model Address {
  id         String    @id @default(uuid())
  street     String
  city       String
  state      String
  zipCode    String
  country    String
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String    @unique
  property   Property?
}

model Property {
  id             String               @id @default(uuid())
  name           String
  type           String // single-family, condo, commercial, multi-family, other
  address        Address?             @relation(fields: [addressId], references: [id])
  addressId      String?              @unique
  squareFootage  Float
  bedrooms       Int?
  bathrooms      Int?
  yearBuilt      Int?
  photos         Photo[]
  documents      Document[]
  systems        SystemInstallation[]
  serviceHistory ServiceRecord[]
  customer       Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId     String
  projects       Project[]
  proposals      Proposal[]
}

model Photo {
  id         String   @id @default(uuid())
  url        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  uploadedAt DateTime @default(now())
  uploadedBy String
}

model Document {
  id         String    @id @default(uuid())
  name       String
  url        String
  type       String
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  propertyId String?
  project    Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId  String?
  uploadedAt DateTime  @default(now())
  uploadedBy String
}

model SystemInstallation {
  id          String    @id @default(uuid())
  type        String
  details     String
  installDate DateTime?
  lastService DateTime?
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
}

model ServiceRecord {
  id          String   @id @default(uuid())
  date        DateTime
  type        String
  description String
  technician  String
  cost        Float
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
}

model Project {
  id          String              @id @default(uuid())
  name        String
  description String
  status      String // planning, in-progress, completed, on-hold, cancelled
  startDate   DateTime
  endDate     DateTime?
  property    Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  teamMembers ProjectTeamMember[]
  milestones  Milestone[]
  budget      Budget?
  documents   Document[]
  customer    Customer            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String
  proposals   Proposal[]
}

model ProjectTeamMember {
  id           String     @id @default(uuid())
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  teamMemberId String
}

model TeamMember {
  id       String              @id @default(uuid())
  name     String
  role     String
  email    String
  phone    String
  projects ProjectTeamMember[]
}

model Milestone {
  id            String    @id @default(uuid())
  name          String
  description   String
  status        String // pending, in-progress, completed, overdue
  dueDate       DateTime
  completedDate DateTime?
  assignedTo    String?
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
}

model Budget {
  id        String           @id @default(uuid())
  currency  String
  total     Float
  spent     Float
  remaining Float
  lineItems BudgetLineItem[]
  project   Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String           @unique
}

model BudgetLineItem {
  id          String @id @default(uuid())
  description String
  amount      Float
  category    String
  budget      Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId    String
}

model Interaction {
  id            String    @id @default(uuid())
  type          String // call, email, meeting, site-visit, other
  date          DateTime
  summary       String
  details       String
  followUpDate  DateTime?
  followUpNotes String?
  createdBy     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String
}

model CustomerMetrics {
  id                       String    @id @default(uuid())
  totalRevenue             Float
  projectsCompleted        Int
  avgResponseTime          Float
  lastInteraction          DateTime?
  nextScheduledInteraction DateTime?
  customer                 Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId               String    @unique
}

// Smart Proposal System Models

model Proposal {
  id              String    @id @default(uuid())
  name            String
  description     String?
  status          String // draft, pending, approved, declined, expired
  customerPersona String // homeowner, interior-designer, builder, architect, cto-cio, business-owner, c-suite, office-manager, facilities-manager
  voiceTranscript String? // Voice-to-text input transcript
  aiSummary       String? // AI-generated proposal summary
  totalAmount     Float     @default(0)
  validUntil      DateTime?

  // Customer vs Prospect fields
  isExistingCustomer Boolean   @default(true)
  customer           Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId         String?

  // Prospect fields (used when isExistingCustomer = false)
  prospectName    String? // Required when isExistingCustomer = false
  prospectCompany String? // Optional company name for prospect
  prospectEmail   String? // Required when isExistingCustomer = false
  prospectPhone   String? // Optional phone for prospect
  prospectStatus  String? // prospect, qualified, approved, converted_to_customer, lost

  property   Property?      @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  propertyId String?
  project    Project?       @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId  String?
  items      ProposalItem[]
  createdBy  String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model ProposalItem {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String // equipment, labor, materials, design, consulting, installation, service
  quantity    Int      @default(1)
  unitPrice   Float
  totalPrice  Float
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId   String?
  proposal    Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId  String
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id              String         @id @default(uuid())
  name            String
  description     String?
  category        String // audio-video, lighting, security, networking, climate, access-control, other
  brand           String?
  model           String?
  sku             String?        @unique
  basePrice       Float
  goodTierPrice   Float? // Good pricing tier
  betterTierPrice Float? // Better pricing tier
  bestTierPrice   Float? // Best pricing tier
  isActive        Boolean        @default(true)
  specifications  String? // JSON or text specifications
  compatibility   String? // Compatible systems/protocols
  installation    String? // Installation requirements/notes
  proposalItems   ProposalItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model ProposalPersona {
  id              String   @id @default(uuid())
  type            String // residential, commercial
  name            String   @unique // homeowner, interior-designer, builder, architect, cto-cio, business-owner, c-suite, office-manager, facilities-manager
  displayName     String
  description     String?
  keyFeatures     String // JSON array of key selling points for this persona
  recommendedTier String // good, better, best
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

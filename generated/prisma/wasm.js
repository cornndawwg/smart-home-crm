
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  firstName: 'firstName',
  lastName: 'lastName',
  company: 'company',
  email: 'email',
  phone: 'phone',
  preferredCommunication: 'preferredCommunication',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  customerId: 'customerId'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  street: 'street',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  customerId: 'customerId'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  addressId: 'addressId',
  squareFootage: 'squareFootage',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  yearBuilt: 'yearBuilt',
  customerId: 'customerId'
};

exports.Prisma.PhotoScalarFieldEnum = {
  id: 'id',
  url: 'url',
  propertyId: 'propertyId',
  uploadedAt: 'uploadedAt',
  uploadedBy: 'uploadedBy'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  type: 'type',
  propertyId: 'propertyId',
  projectId: 'projectId',
  uploadedAt: 'uploadedAt',
  uploadedBy: 'uploadedBy'
};

exports.Prisma.SystemInstallationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  details: 'details',
  installDate: 'installDate',
  lastService: 'lastService',
  propertyId: 'propertyId'
};

exports.Prisma.ServiceRecordScalarFieldEnum = {
  id: 'id',
  date: 'date',
  type: 'type',
  description: 'description',
  technician: 'technician',
  cost: 'cost',
  propertyId: 'propertyId'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  propertyId: 'propertyId',
  customerId: 'customerId'
};

exports.Prisma.ProjectTeamMemberScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  teamMemberId: 'teamMemberId'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  email: 'email',
  phone: 'phone'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  dueDate: 'dueDate',
  completedDate: 'completedDate',
  assignedTo: 'assignedTo',
  projectId: 'projectId'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  currency: 'currency',
  total: 'total',
  spent: 'spent',
  remaining: 'remaining',
  projectId: 'projectId'
};

exports.Prisma.BudgetLineItemScalarFieldEnum = {
  id: 'id',
  description: 'description',
  amount: 'amount',
  category: 'category',
  budgetId: 'budgetId'
};

exports.Prisma.InteractionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  date: 'date',
  summary: 'summary',
  details: 'details',
  followUpDate: 'followUpDate',
  followUpNotes: 'followUpNotes',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId'
};

exports.Prisma.CustomerMetricsScalarFieldEnum = {
  id: 'id',
  totalRevenue: 'totalRevenue',
  projectsCompleted: 'projectsCompleted',
  avgResponseTime: 'avgResponseTime',
  lastInteraction: 'lastInteraction',
  nextScheduledInteraction: 'nextScheduledInteraction',
  customerId: 'customerId'
};

exports.Prisma.ProposalScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  customerPersona: 'customerPersona',
  voiceTranscript: 'voiceTranscript',
  aiSummary: 'aiSummary',
  totalAmount: 'totalAmount',
  validUntil: 'validUntil',
  isExistingCustomer: 'isExistingCustomer',
  customerId: 'customerId',
  prospectName: 'prospectName',
  prospectCompany: 'prospectCompany',
  prospectEmail: 'prospectEmail',
  prospectPhone: 'prospectPhone',
  prospectStatus: 'prospectStatus',
  propertyId: 'propertyId',
  projectId: 'projectId',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProposalItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  productId: 'productId',
  proposalId: 'proposalId',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  brand: 'brand',
  model: 'model',
  sku: 'sku',
  basePrice: 'basePrice',
  goodTierPrice: 'goodTierPrice',
  betterTierPrice: 'betterTierPrice',
  bestTierPrice: 'bestTierPrice',
  isActive: 'isActive',
  specifications: 'specifications',
  compatibility: 'compatibility',
  installation: 'installation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProposalPersonaScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  displayName: 'displayName',
  description: 'description',
  keyFeatures: 'keyFeatures',
  recommendedTier: 'recommendedTier',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Customer: 'Customer',
  Tag: 'Tag',
  Address: 'Address',
  Property: 'Property',
  Photo: 'Photo',
  Document: 'Document',
  SystemInstallation: 'SystemInstallation',
  ServiceRecord: 'ServiceRecord',
  Project: 'Project',
  ProjectTeamMember: 'ProjectTeamMember',
  TeamMember: 'TeamMember',
  Milestone: 'Milestone',
  Budget: 'Budget',
  BudgetLineItem: 'BudgetLineItem',
  Interaction: 'Interaction',
  CustomerMetrics: 'CustomerMetrics',
  Proposal: 'Proposal',
  ProposalItem: 'ProposalItem',
  Product: 'Product',
  ProposalPersona: 'ProposalPersona'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
